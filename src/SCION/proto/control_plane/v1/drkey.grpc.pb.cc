// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/control_plane/v1/drkey.proto

#include "proto/control_plane/v1/drkey.pb.h"
#include "proto/control_plane/v1/drkey.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {
namespace control_plane {
namespace v1 {

static const char* DRKeyInterService_method_names[] = {
  "/proto.control_plane.v1.DRKeyInterService/DRKeyLevel1",
};

std::unique_ptr< DRKeyInterService::Stub> DRKeyInterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DRKeyInterService::Stub> stub(new DRKeyInterService::Stub(channel, options));
  return stub;
}

DRKeyInterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DRKeyLevel1_(DRKeyInterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DRKeyInterService::Stub::DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::proto::control_plane::v1::DRKeyLevel1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyLevel1_, context, request, response);
}

void DRKeyInterService::Stub::async::DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyLevel1_, context, request, response, std::move(f));
}

void DRKeyInterService::Stub::async::DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyLevel1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>* DRKeyInterService::Stub::PrepareAsyncDRKeyLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::DRKeyLevel1Response, ::proto::control_plane::v1::DRKeyLevel1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyLevel1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>* DRKeyInterService::Stub::AsyncDRKeyLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyLevel1Raw(context, request, cq);
  result->StartCall();
  return result;
}

DRKeyInterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DRKeyInterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DRKeyInterService::Service, ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DRKeyInterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::DRKeyLevel1Request* req,
             ::proto::control_plane::v1::DRKeyLevel1Response* resp) {
               return service->DRKeyLevel1(ctx, req, resp);
             }, this)));
}

DRKeyInterService::Service::~Service() {
}

::grpc::Status DRKeyInterService::Service::DRKeyLevel1(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DRKeyIntraService_method_names[] = {
  "/proto.control_plane.v1.DRKeyIntraService/DRKeyIntraLevel1",
  "/proto.control_plane.v1.DRKeyIntraService/DRKeyASHost",
  "/proto.control_plane.v1.DRKeyIntraService/DRKeyHostAS",
  "/proto.control_plane.v1.DRKeyIntraService/DRKeyHostHost",
  "/proto.control_plane.v1.DRKeyIntraService/DRKeySecretValue",
};

std::unique_ptr< DRKeyIntraService::Stub> DRKeyIntraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DRKeyIntraService::Stub> stub(new DRKeyIntraService::Stub(channel, options));
  return stub;
}

DRKeyIntraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DRKeyIntraLevel1_(DRKeyIntraService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeyASHost_(DRKeyIntraService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeyHostAS_(DRKeyIntraService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeyHostHost_(DRKeyIntraService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeySecretValue_(DRKeyIntraService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DRKeyIntraService::Stub::DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyIntraLevel1_, context, request, response);
}

void DRKeyIntraService::Stub::async::DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyIntraLevel1_, context, request, response, std::move(f));
}

void DRKeyIntraService::Stub::async::DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyIntraLevel1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* DRKeyIntraService::Stub::PrepareAsyncDRKeyIntraLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::DRKeyIntraLevel1Response, ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyIntraLevel1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* DRKeyIntraService::Stub::AsyncDRKeyIntraLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyIntraLevel1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DRKeyIntraService::Stub::DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::proto::control_plane::v1::DRKeyASHostResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyASHost_, context, request, response);
}

void DRKeyIntraService::Stub::async::DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyASHost_, context, request, response, std::move(f));
}

void DRKeyIntraService::Stub::async::DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyASHost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>* DRKeyIntraService::Stub::PrepareAsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::DRKeyASHostResponse, ::proto::control_plane::v1::DRKeyASHostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyASHost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>* DRKeyIntraService::Stub::AsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyASHostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DRKeyIntraService::Stub::DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::proto::control_plane::v1::DRKeyHostASResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyHostAS_, context, request, response);
}

void DRKeyIntraService::Stub::async::DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostAS_, context, request, response, std::move(f));
}

void DRKeyIntraService::Stub::async::DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostAS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>* DRKeyIntraService::Stub::PrepareAsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::DRKeyHostASResponse, ::proto::control_plane::v1::DRKeyHostASRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyHostAS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>* DRKeyIntraService::Stub::AsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyHostASRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DRKeyIntraService::Stub::DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::proto::control_plane::v1::DRKeyHostHostResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyHostHost_, context, request, response);
}

void DRKeyIntraService::Stub::async::DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostHost_, context, request, response, std::move(f));
}

void DRKeyIntraService::Stub::async::DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostHost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>* DRKeyIntraService::Stub::PrepareAsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::DRKeyHostHostResponse, ::proto::control_plane::v1::DRKeyHostHostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyHostHost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>* DRKeyIntraService::Stub::AsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyHostHostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DRKeyIntraService::Stub::DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::proto::control_plane::v1::DRKeySecretValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeySecretValue_, context, request, response);
}

void DRKeyIntraService::Stub::async::DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeySecretValue_, context, request, response, std::move(f));
}

void DRKeyIntraService::Stub::async::DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeySecretValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>* DRKeyIntraService::Stub::PrepareAsyncDRKeySecretValueRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::DRKeySecretValueResponse, ::proto::control_plane::v1::DRKeySecretValueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeySecretValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>* DRKeyIntraService::Stub::AsyncDRKeySecretValueRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeySecretValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

DRKeyIntraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DRKeyIntraService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DRKeyIntraService::Service, ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DRKeyIntraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::DRKeyIntraLevel1Request* req,
             ::proto::control_plane::v1::DRKeyIntraLevel1Response* resp) {
               return service->DRKeyIntraLevel1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DRKeyIntraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DRKeyIntraService::Service, ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DRKeyIntraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::DRKeyASHostRequest* req,
             ::proto::control_plane::v1::DRKeyASHostResponse* resp) {
               return service->DRKeyASHost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DRKeyIntraService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DRKeyIntraService::Service, ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DRKeyIntraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::DRKeyHostASRequest* req,
             ::proto::control_plane::v1::DRKeyHostASResponse* resp) {
               return service->DRKeyHostAS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DRKeyIntraService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DRKeyIntraService::Service, ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DRKeyIntraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::DRKeyHostHostRequest* req,
             ::proto::control_plane::v1::DRKeyHostHostResponse* resp) {
               return service->DRKeyHostHost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DRKeyIntraService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DRKeyIntraService::Service, ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DRKeyIntraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::DRKeySecretValueRequest* req,
             ::proto::control_plane::v1::DRKeySecretValueResponse* resp) {
               return service->DRKeySecretValue(ctx, req, resp);
             }, this)));
}

DRKeyIntraService::Service::~Service() {
}

::grpc::Status DRKeyIntraService::Service::DRKeyIntraLevel1(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DRKeyIntraService::Service::DRKeyASHost(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DRKeyIntraService::Service::DRKeyHostAS(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DRKeyIntraService::Service::DRKeyHostHost(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DRKeyIntraService::Service::DRKeySecretValue(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace control_plane
}  // namespace v1

