// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/control_plane/v1/cppki.proto
// Original file comments:
// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_proto_2fcontrol_5fplane_2fv1_2fcppki_2eproto__INCLUDED
#define GRPC_proto_2fcontrol_5fplane_2fv1_2fcppki_2eproto__INCLUDED

#include "proto/control_plane/v1/cppki.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {
namespace control_plane {
namespace v1 {

class TrustMaterialService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.control_plane.v1.TrustMaterialService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return the certificate chains that match the request.
    virtual ::grpc::Status Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::proto::control_plane::v1::ChainsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::ChainsResponse>> AsyncChains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::ChainsResponse>>(AsyncChainsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::ChainsResponse>> PrepareAsyncChains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::ChainsResponse>>(PrepareAsyncChainsRaw(context, request, cq));
    }
    // Return a specific TRC that matches the request.
    virtual ::grpc::Status TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::proto::control_plane::v1::TRCResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::TRCResponse>> AsyncTRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::TRCResponse>>(AsyncTRCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::TRCResponse>> PrepareAsyncTRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::TRCResponse>>(PrepareAsyncTRCRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return the certificate chains that match the request.
      virtual void Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return a specific TRC that matches the request.
      virtual void TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::ChainsResponse>* AsyncChainsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::ChainsResponse>* PrepareAsyncChainsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::TRCResponse>* AsyncTRCRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::TRCResponse>* PrepareAsyncTRCRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::proto::control_plane::v1::ChainsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>> AsyncChains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>>(AsyncChainsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>> PrepareAsyncChains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>>(PrepareAsyncChainsRaw(context, request, cq));
    }
    ::grpc::Status TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::proto::control_plane::v1::TRCResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>> AsyncTRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>>(AsyncTRCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>> PrepareAsyncTRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>>(PrepareAsyncTRCRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response, std::function<void(::grpc::Status)>) override;
      void Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response, std::function<void(::grpc::Status)>) override;
      void TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>* AsyncChainsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>* PrepareAsyncChainsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>* AsyncTRCRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>* PrepareAsyncTRCRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Chains_;
    const ::grpc::internal::RpcMethod rpcmethod_TRC_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return the certificate chains that match the request.
    virtual ::grpc::Status Chains(::grpc::ServerContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response);
    // Return a specific TRC that matches the request.
    virtual ::grpc::Status TRC(::grpc::ServerContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Chains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Chains() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Chains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chains(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChains(::grpc::ServerContext* context, ::proto::control_plane::v1::ChainsRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::ChainsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TRC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TRC() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TRC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TRC(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTRC(::grpc::ServerContext* context, ::proto::control_plane::v1::TRCRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::TRCResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Chains<WithAsyncMethod_TRC<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Chains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Chains() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response) { return this->Chains(context, request, response); }));}
    void SetMessageAllocatorFor_Chains(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Chains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chains(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Chains(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TRC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TRC() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response) { return this->TRC(context, request, response); }));}
    void SetMessageAllocatorFor_TRC(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TRC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TRC(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TRC(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Chains<WithCallbackMethod_TRC<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Chains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Chains() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Chains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chains(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TRC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TRC() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TRC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TRC(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Chains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Chains() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Chains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chains(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChains(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TRC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TRC() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TRC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TRC(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTRC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Chains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Chains() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Chains(context, request, response); }));
    }
    ~WithRawCallbackMethod_Chains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chains(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Chains(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TRC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TRC() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TRC(context, request, response); }));
    }
    ~WithRawCallbackMethod_TRC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TRC(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TRC(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Chains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Chains() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse>* streamer) {
                       return this->StreamedChains(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Chains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Chains(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::ChainsRequest* /*request*/, ::proto::control_plane::v1::ChainsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChains(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::ChainsRequest,::proto::control_plane::v1::ChainsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TRC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TRC() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse>* streamer) {
                       return this->StreamedTRC(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TRC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TRC(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::TRCRequest* /*request*/, ::proto::control_plane::v1::TRCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTRC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::TRCRequest,::proto::control_plane::v1::TRCResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Chains<WithStreamedUnaryMethod_TRC<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Chains<WithStreamedUnaryMethod_TRC<Service > > StreamedService;
};

}  // namespace v1
}  // namespace control_plane
}  // namespace proto


#endif  // GRPC_proto_2fcontrol_5fplane_2fv1_2fcppki_2eproto__INCLUDED
