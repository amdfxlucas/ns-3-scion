// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/control_plane/v1/seg.proto

#include "proto/control_plane/v1/seg.pb.h"
#include "proto/control_plane/v1/seg.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {
namespace control_plane {
namespace v1 {

static const char* SegmentLookupService_method_names[] = {
  "/proto.control_plane.v1.SegmentLookupService/Segments",
};

std::unique_ptr< SegmentLookupService::Stub> SegmentLookupService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SegmentLookupService::Stub> stub(new SegmentLookupService::Stub(channel, options));
  return stub;
}

SegmentLookupService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Segments_(SegmentLookupService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SegmentLookupService::Stub::Segments(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRequest& request, ::proto::control_plane::v1::SegmentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::SegmentsRequest, ::proto::control_plane::v1::SegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Segments_, context, request, response);
}

void SegmentLookupService::Stub::async::Segments(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRequest* request, ::proto::control_plane::v1::SegmentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::SegmentsRequest, ::proto::control_plane::v1::SegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Segments_, context, request, response, std::move(f));
}

void SegmentLookupService::Stub::async::Segments(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRequest* request, ::proto::control_plane::v1::SegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Segments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::SegmentsResponse>* SegmentLookupService::Stub::PrepareAsyncSegmentsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::SegmentsResponse, ::proto::control_plane::v1::SegmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Segments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::SegmentsResponse>* SegmentLookupService::Stub::AsyncSegmentsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

SegmentLookupService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SegmentLookupService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SegmentLookupService::Service, ::proto::control_plane::v1::SegmentsRequest, ::proto::control_plane::v1::SegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SegmentLookupService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::SegmentsRequest* req,
             ::proto::control_plane::v1::SegmentsResponse* resp) {
               return service->Segments(ctx, req, resp);
             }, this)));
}

SegmentLookupService::Service::~Service() {
}

::grpc::Status SegmentLookupService::Service::Segments(::grpc::ServerContext* context, const ::proto::control_plane::v1::SegmentsRequest* request, ::proto::control_plane::v1::SegmentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SegmentRegistrationService_method_names[] = {
  "/proto.control_plane.v1.SegmentRegistrationService/SegmentsRegistration",
};

std::unique_ptr< SegmentRegistrationService::Stub> SegmentRegistrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SegmentRegistrationService::Stub> stub(new SegmentRegistrationService::Stub(channel, options));
  return stub;
}

SegmentRegistrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SegmentsRegistration_(SegmentRegistrationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SegmentRegistrationService::Stub::SegmentsRegistration(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRegistrationRequest& request, ::proto::control_plane::v1::SegmentsRegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::SegmentsRegistrationRequest, ::proto::control_plane::v1::SegmentsRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SegmentsRegistration_, context, request, response);
}

void SegmentRegistrationService::Stub::async::SegmentsRegistration(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRegistrationRequest* request, ::proto::control_plane::v1::SegmentsRegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::SegmentsRegistrationRequest, ::proto::control_plane::v1::SegmentsRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SegmentsRegistration_, context, request, response, std::move(f));
}

void SegmentRegistrationService::Stub::async::SegmentsRegistration(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRegistrationRequest* request, ::proto::control_plane::v1::SegmentsRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SegmentsRegistration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::SegmentsRegistrationResponse>* SegmentRegistrationService::Stub::PrepareAsyncSegmentsRegistrationRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::SegmentsRegistrationResponse, ::proto::control_plane::v1::SegmentsRegistrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SegmentsRegistration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::SegmentsRegistrationResponse>* SegmentRegistrationService::Stub::AsyncSegmentsRegistrationRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::SegmentsRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSegmentsRegistrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

SegmentRegistrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SegmentRegistrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SegmentRegistrationService::Service, ::proto::control_plane::v1::SegmentsRegistrationRequest, ::proto::control_plane::v1::SegmentsRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SegmentRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::SegmentsRegistrationRequest* req,
             ::proto::control_plane::v1::SegmentsRegistrationResponse* resp) {
               return service->SegmentsRegistration(ctx, req, resp);
             }, this)));
}

SegmentRegistrationService::Service::~Service() {
}

::grpc::Status SegmentRegistrationService::Service::SegmentsRegistration(::grpc::ServerContext* context, const ::proto::control_plane::v1::SegmentsRegistrationRequest* request, ::proto::control_plane::v1::SegmentsRegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SegmentCreationService_method_names[] = {
  "/proto.control_plane.v1.SegmentCreationService/Beacon",
};

std::unique_ptr< SegmentCreationService::Stub> SegmentCreationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SegmentCreationService::Stub> stub(new SegmentCreationService::Stub(channel, options));
  return stub;
}

SegmentCreationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Beacon_(SegmentCreationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SegmentCreationService::Stub::Beacon(::grpc::ClientContext* context, const ::proto::control_plane::v1::BeaconRequest& request, ::proto::control_plane::v1::BeaconResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::BeaconRequest, ::proto::control_plane::v1::BeaconResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Beacon_, context, request, response);
}

void SegmentCreationService::Stub::async::Beacon(::grpc::ClientContext* context, const ::proto::control_plane::v1::BeaconRequest* request, ::proto::control_plane::v1::BeaconResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::BeaconRequest, ::proto::control_plane::v1::BeaconResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Beacon_, context, request, response, std::move(f));
}

void SegmentCreationService::Stub::async::Beacon(::grpc::ClientContext* context, const ::proto::control_plane::v1::BeaconRequest* request, ::proto::control_plane::v1::BeaconResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Beacon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::BeaconResponse>* SegmentCreationService::Stub::PrepareAsyncBeaconRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::BeaconRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::BeaconResponse, ::proto::control_plane::v1::BeaconRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Beacon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::BeaconResponse>* SegmentCreationService::Stub::AsyncBeaconRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::BeaconRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBeaconRaw(context, request, cq);
  result->StartCall();
  return result;
}

SegmentCreationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SegmentCreationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SegmentCreationService::Service, ::proto::control_plane::v1::BeaconRequest, ::proto::control_plane::v1::BeaconResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SegmentCreationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::BeaconRequest* req,
             ::proto::control_plane::v1::BeaconResponse* resp) {
               return service->Beacon(ctx, req, resp);
             }, this)));
}

SegmentCreationService::Service::~Service() {
}

::grpc::Status SegmentCreationService::Service::Beacon(::grpc::ServerContext* context, const ::proto::control_plane::v1::BeaconRequest* request, ::proto::control_plane::v1::BeaconResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace control_plane
}  // namespace v1

