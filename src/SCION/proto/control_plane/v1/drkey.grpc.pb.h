// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/control_plane/v1/drkey.proto
// Original file comments:
// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_proto_2fcontrol_5fplane_2fv1_2fdrkey_2eproto__INCLUDED
#define GRPC_proto_2fcontrol_5fplane_2fv1_2fdrkey_2eproto__INCLUDED

#include "proto/control_plane/v1/drkey.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {
namespace control_plane {
namespace v1 {

class DRKeyInterService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.control_plane.v1.DRKeyInterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return the Level1Key that matches the request
    virtual ::grpc::Status DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::proto::control_plane::v1::DRKeyLevel1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyLevel1Response>> AsyncDRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyLevel1Response>>(AsyncDRKeyLevel1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyLevel1Response>> PrepareAsyncDRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyLevel1Response>>(PrepareAsyncDRKeyLevel1Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return the Level1Key that matches the request
      virtual void DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyLevel1Response>* AsyncDRKeyLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyLevel1Response>* PrepareAsyncDRKeyLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::proto::control_plane::v1::DRKeyLevel1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>> AsyncDRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>>(AsyncDRKeyLevel1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>> PrepareAsyncDRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>>(PrepareAsyncDRKeyLevel1Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response, std::function<void(::grpc::Status)>) override;
      void DRKeyLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>* AsyncDRKeyLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyLevel1Response>* PrepareAsyncDRKeyLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyLevel1_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return the Level1Key that matches the request
    virtual ::grpc::Status DRKeyLevel1(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyLevel1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DRKeyLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyLevel1(::grpc::ServerContext* context, ::proto::control_plane::v1::DRKeyLevel1Request* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::DRKeyLevel1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DRKeyLevel1<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DRKeyLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyLevel1() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::DRKeyLevel1Request* request, ::proto::control_plane::v1::DRKeyLevel1Response* response) { return this->DRKeyLevel1(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyLevel1(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyLevel1(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DRKeyLevel1<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DRKeyLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyLevel1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DRKeyLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyLevel1() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DRKeyLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyLevel1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyLevel1() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyLevel1(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyLevel1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyLevel1() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::DRKeyLevel1Request, ::proto::control_plane::v1::DRKeyLevel1Response>* streamer) {
                       return this->StreamedDRKeyLevel1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyLevel1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::DRKeyLevel1Request,::proto::control_plane::v1::DRKeyLevel1Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DRKeyLevel1<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DRKeyLevel1<Service > StreamedService;
};

class DRKeyIntraService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.control_plane.v1.DRKeyIntraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return the ASAS that matches the request
    virtual ::grpc::Status DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyIntraLevel1Response>> AsyncDRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyIntraLevel1Response>>(AsyncDRKeyIntraLevel1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyIntraLevel1Response>> PrepareAsyncDRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyIntraLevel1Response>>(PrepareAsyncDRKeyIntraLevel1Raw(context, request, cq));
    }
    // Return the AS-Host that matches the request
    virtual ::grpc::Status DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::proto::control_plane::v1::DRKeyASHostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyASHostResponse>> AsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyASHostResponse>>(AsyncDRKeyASHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyASHostResponse>> PrepareAsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyASHostResponse>>(PrepareAsyncDRKeyASHostRaw(context, request, cq));
    }
    // Return the Host-AS that matches the request
    virtual ::grpc::Status DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::proto::control_plane::v1::DRKeyHostASResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostASResponse>> AsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostASResponse>>(AsyncDRKeyHostASRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostASResponse>> PrepareAsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostASResponse>>(PrepareAsyncDRKeyHostASRaw(context, request, cq));
    }
    // Return the Host-Host that matches the request
    virtual ::grpc::Status DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::proto::control_plane::v1::DRKeyHostHostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostHostResponse>> AsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostHostResponse>>(AsyncDRKeyHostHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostHostResponse>> PrepareAsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostHostResponse>>(PrepareAsyncDRKeyHostHostRaw(context, request, cq));
    }
    // Return the SecretValue that matches the request
    virtual ::grpc::Status DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::proto::control_plane::v1::DRKeySecretValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeySecretValueResponse>> AsyncDRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeySecretValueResponse>>(AsyncDRKeySecretValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeySecretValueResponse>> PrepareAsyncDRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeySecretValueResponse>>(PrepareAsyncDRKeySecretValueRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return the ASAS that matches the request
      virtual void DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return the AS-Host that matches the request
      virtual void DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return the Host-AS that matches the request
      virtual void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return the Host-Host that matches the request
      virtual void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return the SecretValue that matches the request
      virtual void DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* AsyncDRKeyIntraLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* PrepareAsyncDRKeyIntraLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyASHostResponse>* AsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyASHostResponse>* PrepareAsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostASResponse>* AsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostASResponse>* PrepareAsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostHostResponse>* AsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeyHostHostResponse>* PrepareAsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeySecretValueResponse>* AsyncDRKeySecretValueRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::control_plane::v1::DRKeySecretValueResponse>* PrepareAsyncDRKeySecretValueRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>> AsyncDRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>>(AsyncDRKeyIntraLevel1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>> PrepareAsyncDRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>>(PrepareAsyncDRKeyIntraLevel1Raw(context, request, cq));
    }
    ::grpc::Status DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::proto::control_plane::v1::DRKeyASHostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>> AsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>>(AsyncDRKeyASHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>> PrepareAsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>>(PrepareAsyncDRKeyASHostRaw(context, request, cq));
    }
    ::grpc::Status DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::proto::control_plane::v1::DRKeyHostASResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>> AsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>>(AsyncDRKeyHostASRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>> PrepareAsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>>(PrepareAsyncDRKeyHostASRaw(context, request, cq));
    }
    ::grpc::Status DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::proto::control_plane::v1::DRKeyHostHostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>> AsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>>(AsyncDRKeyHostHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>> PrepareAsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>>(PrepareAsyncDRKeyHostHostRaw(context, request, cq));
    }
    ::grpc::Status DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::proto::control_plane::v1::DRKeySecretValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>> AsyncDRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>>(AsyncDRKeySecretValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>> PrepareAsyncDRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>>(PrepareAsyncDRKeySecretValueRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response, std::function<void(::grpc::Status)>) override;
      void DRKeyIntraLevel1(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeyASHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeySecretValue(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* AsyncDRKeyIntraLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* PrepareAsyncDRKeyIntraLevel1Raw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>* AsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyASHostResponse>* PrepareAsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>* AsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostASResponse>* PrepareAsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>* AsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeyHostHostResponse>* PrepareAsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>* AsyncDRKeySecretValueRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::DRKeySecretValueResponse>* PrepareAsyncDRKeySecretValueRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyIntraLevel1_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyASHost_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyHostAS_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyHostHost_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeySecretValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return the ASAS that matches the request
    virtual ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response);
    // Return the AS-Host that matches the request
    virtual ::grpc::Status DRKeyASHost(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response);
    // Return the Host-AS that matches the request
    virtual ::grpc::Status DRKeyHostAS(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response);
    // Return the Host-Host that matches the request
    virtual ::grpc::Status DRKeyHostHost(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response);
    // Return the SecretValue that matches the request
    virtual ::grpc::Status DRKeySecretValue(::grpc::ServerContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyIntraLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyIntraLevel1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DRKeyIntraLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyIntraLevel1(::grpc::ServerContext* context, ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::DRKeyIntraLevel1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyASHost(::grpc::ServerContext* context, ::proto::control_plane::v1::DRKeyASHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::DRKeyASHostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostAS(::grpc::ServerContext* context, ::proto::control_plane::v1::DRKeyHostASRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::DRKeyHostASResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostHost(::grpc::ServerContext* context, ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::DRKeyHostHostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeySecretValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeySecretValue() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DRKeySecretValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeySecretValue(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeySecretValue(::grpc::ServerContext* context, ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::control_plane::v1::DRKeySecretValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DRKeyIntraLevel1<WithAsyncMethod_DRKeyASHost<WithAsyncMethod_DRKeyHostAS<WithAsyncMethod_DRKeyHostHost<WithAsyncMethod_DRKeySecretValue<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DRKeyIntraLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyIntraLevel1() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* request, ::proto::control_plane::v1::DRKeyIntraLevel1Response* response) { return this->DRKeyIntraLevel1(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyIntraLevel1(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyIntraLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyIntraLevel1(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::DRKeyASHostRequest* request, ::proto::control_plane::v1::DRKeyASHostResponse* response) { return this->DRKeyASHost(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyASHost(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyASHost(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::DRKeyHostASRequest* request, ::proto::control_plane::v1::DRKeyHostASResponse* response) { return this->DRKeyHostAS(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyHostAS(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostAS(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::DRKeyHostHostRequest* request, ::proto::control_plane::v1::DRKeyHostHostResponse* response) { return this->DRKeyHostHost(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyHostHost(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostHost(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeySecretValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeySecretValue() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::control_plane::v1::DRKeySecretValueRequest* request, ::proto::control_plane::v1::DRKeySecretValueResponse* response) { return this->DRKeySecretValue(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeySecretValue(
        ::grpc::MessageAllocator< ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeySecretValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeySecretValue(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeySecretValue(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DRKeyIntraLevel1<WithCallbackMethod_DRKeyASHost<WithCallbackMethod_DRKeyHostAS<WithCallbackMethod_DRKeyHostHost<WithCallbackMethod_DRKeySecretValue<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DRKeyIntraLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyIntraLevel1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DRKeyIntraLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeySecretValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeySecretValue() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DRKeySecretValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeySecretValue(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyIntraLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyIntraLevel1() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DRKeyIntraLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyIntraLevel1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyASHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostAS(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeySecretValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeySecretValue() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DRKeySecretValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeySecretValue(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeySecretValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyIntraLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyIntraLevel1() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyIntraLevel1(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyIntraLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyIntraLevel1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyASHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyASHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyHostAS(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostAS(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyHostHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeySecretValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeySecretValue() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeySecretValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeySecretValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeySecretValue(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeySecretValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyIntraLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyIntraLevel1() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::DRKeyIntraLevel1Request, ::proto::control_plane::v1::DRKeyIntraLevel1Response>* streamer) {
                       return this->StreamedDRKeyIntraLevel1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyIntraLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyIntraLevel1(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyIntraLevel1Request* /*request*/, ::proto::control_plane::v1::DRKeyIntraLevel1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyIntraLevel1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::DRKeyIntraLevel1Request,::proto::control_plane::v1::DRKeyIntraLevel1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::DRKeyASHostRequest, ::proto::control_plane::v1::DRKeyASHostResponse>* streamer) {
                       return this->StreamedDRKeyASHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyASHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyASHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::DRKeyASHostRequest,::proto::control_plane::v1::DRKeyASHostResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::DRKeyHostASRequest, ::proto::control_plane::v1::DRKeyHostASResponse>* streamer) {
                       return this->StreamedDRKeyHostAS(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostASRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyHostAS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::DRKeyHostASRequest,::proto::control_plane::v1::DRKeyHostASResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::DRKeyHostHostRequest, ::proto::control_plane::v1::DRKeyHostHostResponse>* streamer) {
                       return this->StreamedDRKeyHostHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeyHostHostRequest* /*request*/, ::proto::control_plane::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyHostHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::DRKeyHostHostRequest,::proto::control_plane::v1::DRKeyHostHostResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeySecretValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeySecretValue() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::control_plane::v1::DRKeySecretValueRequest, ::proto::control_plane::v1::DRKeySecretValueResponse>* streamer) {
                       return this->StreamedDRKeySecretValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeySecretValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeySecretValue(::grpc::ServerContext* /*context*/, const ::proto::control_plane::v1::DRKeySecretValueRequest* /*request*/, ::proto::control_plane::v1::DRKeySecretValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeySecretValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::control_plane::v1::DRKeySecretValueRequest,::proto::control_plane::v1::DRKeySecretValueResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DRKeyIntraLevel1<WithStreamedUnaryMethod_DRKeyASHost<WithStreamedUnaryMethod_DRKeyHostAS<WithStreamedUnaryMethod_DRKeyHostHost<WithStreamedUnaryMethod_DRKeySecretValue<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DRKeyIntraLevel1<WithStreamedUnaryMethod_DRKeyASHost<WithStreamedUnaryMethod_DRKeyHostAS<WithStreamedUnaryMethod_DRKeyHostHost<WithStreamedUnaryMethod_DRKeySecretValue<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace control_plane
}  // namespace proto


#endif  // GRPC_proto_2fcontrol_5fplane_2fv1_2fdrkey_2eproto__INCLUDED
