// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/control_plane/v1/cppki.proto

#include "proto/control_plane/v1/cppki.pb.h"
#include "proto/control_plane/v1/cppki.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {
namespace control_plane {
namespace v1 {

static const char* TrustMaterialService_method_names[] = {
  "/proto.control_plane.v1.TrustMaterialService/Chains",
  "/proto.control_plane.v1.TrustMaterialService/TRC",
};

std::unique_ptr< TrustMaterialService::Stub> TrustMaterialService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TrustMaterialService::Stub> stub(new TrustMaterialService::Stub(channel, options));
  return stub;
}

TrustMaterialService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Chains_(TrustMaterialService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TRC_(TrustMaterialService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TrustMaterialService::Stub::Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::proto::control_plane::v1::ChainsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Chains_, context, request, response);
}

void TrustMaterialService::Stub::async::Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Chains_, context, request, response, std::move(f));
}

void TrustMaterialService::Stub::async::Chains(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Chains_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>* TrustMaterialService::Stub::PrepareAsyncChainsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::ChainsResponse, ::proto::control_plane::v1::ChainsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Chains_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::ChainsResponse>* TrustMaterialService::Stub::AsyncChainsRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::ChainsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChainsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TrustMaterialService::Stub::TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::proto::control_plane::v1::TRCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TRC_, context, request, response);
}

void TrustMaterialService::Stub::async::TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TRC_, context, request, response, std::move(f));
}

void TrustMaterialService::Stub::async::TRC(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TRC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>* TrustMaterialService::Stub::PrepareAsyncTRCRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::control_plane::v1::TRCResponse, ::proto::control_plane::v1::TRCRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TRC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::control_plane::v1::TRCResponse>* TrustMaterialService::Stub::AsyncTRCRaw(::grpc::ClientContext* context, const ::proto::control_plane::v1::TRCRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTRCRaw(context, request, cq);
  result->StartCall();
  return result;
}

TrustMaterialService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrustMaterialService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrustMaterialService::Service, ::proto::control_plane::v1::ChainsRequest, ::proto::control_plane::v1::ChainsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrustMaterialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::ChainsRequest* req,
             ::proto::control_plane::v1::ChainsResponse* resp) {
               return service->Chains(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrustMaterialService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrustMaterialService::Service, ::proto::control_plane::v1::TRCRequest, ::proto::control_plane::v1::TRCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrustMaterialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::control_plane::v1::TRCRequest* req,
             ::proto::control_plane::v1::TRCResponse* resp) {
               return service->TRC(ctx, req, resp);
             }, this)));
}

TrustMaterialService::Service::~Service() {
}

::grpc::Status TrustMaterialService::Service::Chains(::grpc::ServerContext* context, const ::proto::control_plane::v1::ChainsRequest* request, ::proto::control_plane::v1::ChainsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrustMaterialService::Service::TRC(::grpc::ServerContext* context, const ::proto::control_plane::v1::TRCRequest* request, ::proto::control_plane::v1::TRCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace control_plane
}  // namespace v1

