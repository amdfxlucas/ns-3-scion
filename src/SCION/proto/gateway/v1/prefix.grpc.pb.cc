// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/gateway/v1/prefix.proto

#include "proto/gateway/v1/prefix.pb.h"
#include "proto/gateway/v1/prefix.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {
namespace gateway {
namespace v1 {

static const char* IPPrefixesService_method_names[] = {
  "/proto.gateway.v1.IPPrefixesService/Prefixes",
};

std::unique_ptr< IPPrefixesService::Stub> IPPrefixesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IPPrefixesService::Stub> stub(new IPPrefixesService::Stub(channel, options));
  return stub;
}

IPPrefixesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Prefixes_(IPPrefixesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IPPrefixesService::Stub::Prefixes(::grpc::ClientContext* context, const ::proto::gateway::v1::PrefixesRequest& request, ::proto::gateway::v1::PrefixesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::gateway::v1::PrefixesRequest, ::proto::gateway::v1::PrefixesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Prefixes_, context, request, response);
}

void IPPrefixesService::Stub::async::Prefixes(::grpc::ClientContext* context, const ::proto::gateway::v1::PrefixesRequest* request, ::proto::gateway::v1::PrefixesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::gateway::v1::PrefixesRequest, ::proto::gateway::v1::PrefixesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prefixes_, context, request, response, std::move(f));
}

void IPPrefixesService::Stub::async::Prefixes(::grpc::ClientContext* context, const ::proto::gateway::v1::PrefixesRequest* request, ::proto::gateway::v1::PrefixesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prefixes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::gateway::v1::PrefixesResponse>* IPPrefixesService::Stub::PrepareAsyncPrefixesRaw(::grpc::ClientContext* context, const ::proto::gateway::v1::PrefixesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::gateway::v1::PrefixesResponse, ::proto::gateway::v1::PrefixesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Prefixes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::gateway::v1::PrefixesResponse>* IPPrefixesService::Stub::AsyncPrefixesRaw(::grpc::ClientContext* context, const ::proto::gateway::v1::PrefixesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrefixesRaw(context, request, cq);
  result->StartCall();
  return result;
}

IPPrefixesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPPrefixesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPPrefixesService::Service, ::proto::gateway::v1::PrefixesRequest, ::proto::gateway::v1::PrefixesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IPPrefixesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::gateway::v1::PrefixesRequest* req,
             ::proto::gateway::v1::PrefixesResponse* resp) {
               return service->Prefixes(ctx, req, resp);
             }, this)));
}

IPPrefixesService::Service::~Service() {
}

::grpc::Status IPPrefixesService::Service::Prefixes(::grpc::ServerContext* context, const ::proto::gateway::v1::PrefixesRequest* request, ::proto::gateway::v1::PrefixesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace gateway
}  // namespace v1

