// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/gateway/v1/control.proto
// Protobuf C++ Version: 4.24.0-main

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fgateway_2fv1_2fcontrol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fgateway_2fv1_2fcontrol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fgateway_2fv1_2fcontrol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fgateway_2fv1_2fcontrol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fgateway_2fv1_2fcontrol_2eproto;
namespace proto {
namespace gateway {
namespace v1 {
class ControlRequest;
struct ControlRequestDefaultTypeInternal;
extern ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
class ControlResponse;
struct ControlResponseDefaultTypeInternal;
extern ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
class ProbeRequest;
struct ProbeRequestDefaultTypeInternal;
extern ProbeRequestDefaultTypeInternal _ProbeRequest_default_instance_;
class ProbeResponse;
struct ProbeResponseDefaultTypeInternal;
extern ProbeResponseDefaultTypeInternal _ProbeResponse_default_instance_;
}  // namespace v1
}  // namespace gateway
}  // namespace proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace proto {
namespace gateway {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ProbeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.gateway.v1.ProbeResponse) */ {
 public:
  inline ProbeResponse() : ProbeResponse(nullptr) {}
  ~ProbeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProbeResponse(::google::protobuf::internal::ConstantInitialized);

  inline ProbeResponse(const ProbeResponse& from)
      : ProbeResponse(nullptr, from) {}
  ProbeResponse(ProbeResponse&& from) noexcept
    : ProbeResponse() {
    *this = ::std::move(from);
  }

  inline ProbeResponse& operator=(const ProbeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeResponse& operator=(ProbeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProbeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbeResponse* internal_default_instance() {
    return reinterpret_cast<const ProbeResponse*>(
               &_ProbeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProbeResponse& a, ProbeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProbeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProbeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProbeResponse& from) {
    ProbeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProbeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.gateway.v1.ProbeResponse";
  }
  protected:
  explicit ProbeResponse(::google::protobuf::Arena* arena);
  ProbeResponse(::google::protobuf::Arena* arena, const ProbeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 session_id = 1;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:proto.gateway.v1.ProbeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fgateway_2fv1_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class ProbeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.gateway.v1.ProbeRequest) */ {
 public:
  inline ProbeRequest() : ProbeRequest(nullptr) {}
  ~ProbeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProbeRequest(::google::protobuf::internal::ConstantInitialized);

  inline ProbeRequest(const ProbeRequest& from)
      : ProbeRequest(nullptr, from) {}
  ProbeRequest(ProbeRequest&& from) noexcept
    : ProbeRequest() {
    *this = ::std::move(from);
  }

  inline ProbeRequest& operator=(const ProbeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeRequest& operator=(ProbeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProbeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbeRequest* internal_default_instance() {
    return reinterpret_cast<const ProbeRequest*>(
               &_ProbeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProbeRequest& a, ProbeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProbeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProbeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProbeRequest& from) {
    ProbeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProbeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.gateway.v1.ProbeRequest";
  }
  protected:
  explicit ProbeRequest(::google::protobuf::Arena* arena);
  ProbeRequest(::google::protobuf::Arena* arena, const ProbeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 session_id = 1;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:proto.gateway.v1.ProbeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fgateway_2fv1_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class ControlResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.gateway.v1.ControlResponse) */ {
 public:
  inline ControlResponse() : ControlResponse(nullptr) {}
  ~ControlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlResponse(::google::protobuf::internal::ConstantInitialized);

  inline ControlResponse(const ControlResponse& from)
      : ControlResponse(nullptr, from) {}
  ControlResponse(ControlResponse&& from) noexcept
    : ControlResponse() {
    *this = ::std::move(from);
  }

  inline ControlResponse& operator=(const ControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlResponse& operator=(ControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kProbe = 1,
    RESPONSE_NOT_SET = 0,
  };

  static inline const ControlResponse* internal_default_instance() {
    return reinterpret_cast<const ControlResponse*>(
               &_ControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlResponse& a, ControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlResponse& from) {
    ControlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControlResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.gateway.v1.ControlResponse";
  }
  protected:
  explicit ControlResponse(::google::protobuf::Arena* arena);
  ControlResponse(::google::protobuf::Arena* arena, const ControlResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbeFieldNumber = 1,
  };
  // .proto.gateway.v1.ProbeResponse probe = 1;
  bool has_probe() const;
  private:
  bool _internal_has_probe() const;

  public:
  void clear_probe() ;
  const ::proto::gateway::v1::ProbeResponse& probe() const;
  PROTOBUF_NODISCARD ::proto::gateway::v1::ProbeResponse* release_probe();
  ::proto::gateway::v1::ProbeResponse* mutable_probe();
  void set_allocated_probe(::proto::gateway::v1::ProbeResponse* value);
  void unsafe_arena_set_allocated_probe(::proto::gateway::v1::ProbeResponse* value);
  ::proto::gateway::v1::ProbeResponse* unsafe_arena_release_probe();

  private:
  const ::proto::gateway::v1::ProbeResponse& _internal_probe() const;
  ::proto::gateway::v1::ProbeResponse* _internal_mutable_probe();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:proto.gateway.v1.ControlResponse)
 private:
  class _Internal;
  void set_has_probe();

  inline bool has_response() const;
  inline void clear_has_response();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::proto::gateway::v1::ProbeResponse* probe_;
    } response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fgateway_2fv1_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class ControlRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.gateway.v1.ControlRequest) */ {
 public:
  inline ControlRequest() : ControlRequest(nullptr) {}
  ~ControlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlRequest(::google::protobuf::internal::ConstantInitialized);

  inline ControlRequest(const ControlRequest& from)
      : ControlRequest(nullptr, from) {}
  ControlRequest(ControlRequest&& from) noexcept
    : ControlRequest() {
    *this = ::std::move(from);
  }

  inline ControlRequest& operator=(const ControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlRequest& operator=(ControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kProbe = 1,
    REQUEST_NOT_SET = 0,
  };

  static inline const ControlRequest* internal_default_instance() {
    return reinterpret_cast<const ControlRequest*>(
               &_ControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlRequest& a, ControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlRequest& from) {
    ControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControlRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.gateway.v1.ControlRequest";
  }
  protected:
  explicit ControlRequest(::google::protobuf::Arena* arena);
  ControlRequest(::google::protobuf::Arena* arena, const ControlRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbeFieldNumber = 1,
  };
  // .proto.gateway.v1.ProbeRequest probe = 1;
  bool has_probe() const;
  private:
  bool _internal_has_probe() const;

  public:
  void clear_probe() ;
  const ::proto::gateway::v1::ProbeRequest& probe() const;
  PROTOBUF_NODISCARD ::proto::gateway::v1::ProbeRequest* release_probe();
  ::proto::gateway::v1::ProbeRequest* mutable_probe();
  void set_allocated_probe(::proto::gateway::v1::ProbeRequest* value);
  void unsafe_arena_set_allocated_probe(::proto::gateway::v1::ProbeRequest* value);
  ::proto::gateway::v1::ProbeRequest* unsafe_arena_release_probe();

  private:
  const ::proto::gateway::v1::ProbeRequest& _internal_probe() const;
  ::proto::gateway::v1::ProbeRequest* _internal_mutable_probe();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:proto.gateway.v1.ControlRequest)
 private:
  class _Internal;
  void set_has_probe();

  inline bool has_request() const;
  inline void clear_has_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::proto::gateway::v1::ProbeRequest* probe_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fgateway_2fv1_2fcontrol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ControlRequest

// .proto.gateway.v1.ProbeRequest probe = 1;
inline bool ControlRequest::has_probe() const {
  return request_case() == kProbe;
}
inline bool ControlRequest::_internal_has_probe() const {
  return request_case() == kProbe;
}
inline void ControlRequest::set_has_probe() {
  _impl_._oneof_case_[0] = kProbe;
}
inline void ControlRequest::clear_probe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kProbe) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.probe_;
    }
    clear_has_request();
  }
}
inline ::proto::gateway::v1::ProbeRequest* ControlRequest::release_probe() {
  // @@protoc_insertion_point(field_release:proto.gateway.v1.ControlRequest.probe)
  if (request_case() == kProbe) {
    clear_has_request();
    auto* temp = _impl_.request_.probe_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.probe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::gateway::v1::ProbeRequest& ControlRequest::_internal_probe() const {
  return request_case() == kProbe ? *_impl_.request_.probe_ : reinterpret_cast<::proto::gateway::v1::ProbeRequest&>(::proto::gateway::v1::_ProbeRequest_default_instance_);
}
inline const ::proto::gateway::v1::ProbeRequest& ControlRequest::probe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.gateway.v1.ControlRequest.probe)
  return _internal_probe();
}
inline ::proto::gateway::v1::ProbeRequest* ControlRequest::unsafe_arena_release_probe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.gateway.v1.ControlRequest.probe)
  if (request_case() == kProbe) {
    clear_has_request();
    auto* temp = _impl_.request_.probe_;
    _impl_.request_.probe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControlRequest::unsafe_arena_set_allocated_probe(::proto::gateway::v1::ProbeRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_probe();
    _impl_.request_.probe_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.gateway.v1.ControlRequest.probe)
}
inline ::proto::gateway::v1::ProbeRequest* ControlRequest::_internal_mutable_probe() {
  if (request_case() != kProbe) {
    clear_request();
    set_has_probe();
    _impl_.request_.probe_ = CreateMaybeMessage<::proto::gateway::v1::ProbeRequest>(GetArena());
  }
  return _impl_.request_.probe_;
}
inline ::proto::gateway::v1::ProbeRequest* ControlRequest::mutable_probe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::proto::gateway::v1::ProbeRequest* _msg = _internal_mutable_probe();
  // @@protoc_insertion_point(field_mutable:proto.gateway.v1.ControlRequest.probe)
  return _msg;
}

inline bool ControlRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void ControlRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline ControlRequest::RequestCase ControlRequest::request_case() const {
  return ControlRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControlResponse

// .proto.gateway.v1.ProbeResponse probe = 1;
inline bool ControlResponse::has_probe() const {
  return response_case() == kProbe;
}
inline bool ControlResponse::_internal_has_probe() const {
  return response_case() == kProbe;
}
inline void ControlResponse::set_has_probe() {
  _impl_._oneof_case_[0] = kProbe;
}
inline void ControlResponse::clear_probe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kProbe) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.probe_;
    }
    clear_has_response();
  }
}
inline ::proto::gateway::v1::ProbeResponse* ControlResponse::release_probe() {
  // @@protoc_insertion_point(field_release:proto.gateway.v1.ControlResponse.probe)
  if (response_case() == kProbe) {
    clear_has_response();
    auto* temp = _impl_.response_.probe_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.probe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::gateway::v1::ProbeResponse& ControlResponse::_internal_probe() const {
  return response_case() == kProbe ? *_impl_.response_.probe_ : reinterpret_cast<::proto::gateway::v1::ProbeResponse&>(::proto::gateway::v1::_ProbeResponse_default_instance_);
}
inline const ::proto::gateway::v1::ProbeResponse& ControlResponse::probe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.gateway.v1.ControlResponse.probe)
  return _internal_probe();
}
inline ::proto::gateway::v1::ProbeResponse* ControlResponse::unsafe_arena_release_probe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.gateway.v1.ControlResponse.probe)
  if (response_case() == kProbe) {
    clear_has_response();
    auto* temp = _impl_.response_.probe_;
    _impl_.response_.probe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControlResponse::unsafe_arena_set_allocated_probe(::proto::gateway::v1::ProbeResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_probe();
    _impl_.response_.probe_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.gateway.v1.ControlResponse.probe)
}
inline ::proto::gateway::v1::ProbeResponse* ControlResponse::_internal_mutable_probe() {
  if (response_case() != kProbe) {
    clear_response();
    set_has_probe();
    _impl_.response_.probe_ = CreateMaybeMessage<::proto::gateway::v1::ProbeResponse>(GetArena());
  }
  return _impl_.response_.probe_;
}
inline ::proto::gateway::v1::ProbeResponse* ControlResponse::mutable_probe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::proto::gateway::v1::ProbeResponse* _msg = _internal_mutable_probe();
  // @@protoc_insertion_point(field_mutable:proto.gateway.v1.ControlResponse.probe)
  return _msg;
}

inline bool ControlResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ControlResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ControlResponse::ResponseCase ControlResponse::response_case() const {
  return ControlResponse::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProbeRequest

// uint32 session_id = 1;
inline void ProbeRequest::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t ProbeRequest::session_id() const {
  // @@protoc_insertion_point(field_get:proto.gateway.v1.ProbeRequest.session_id)
  return _internal_session_id();
}
inline void ProbeRequest::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:proto.gateway.v1.ProbeRequest.session_id)
}
inline ::uint32_t ProbeRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_;
}
inline void ProbeRequest::_internal_set_session_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_ = value;
}

// bytes data = 2;
inline void ProbeRequest::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ProbeRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.gateway.v1.ProbeRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProbeRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.gateway.v1.ProbeRequest.data)
}
inline std::string* ProbeRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto.gateway.v1.ProbeRequest.data)
  return _s;
}
inline const std::string& ProbeRequest::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void ProbeRequest::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ProbeRequest::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ProbeRequest::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.gateway.v1.ProbeRequest.data)
  return _impl_.data_.Release();
}
inline void ProbeRequest::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.gateway.v1.ProbeRequest.data)
}

// -------------------------------------------------------------------

// ProbeResponse

// uint32 session_id = 1;
inline void ProbeResponse::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t ProbeResponse::session_id() const {
  // @@protoc_insertion_point(field_get:proto.gateway.v1.ProbeResponse.session_id)
  return _internal_session_id();
}
inline void ProbeResponse::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:proto.gateway.v1.ProbeResponse.session_id)
}
inline ::uint32_t ProbeResponse::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_;
}
inline void ProbeResponse::_internal_set_session_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_ = value;
}

// bytes data = 2;
inline void ProbeResponse::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ProbeResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.gateway.v1.ProbeResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProbeResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.gateway.v1.ProbeResponse.data)
}
inline std::string* ProbeResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto.gateway.v1.ProbeResponse.data)
  return _s;
}
inline const std::string& ProbeResponse::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void ProbeResponse::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ProbeResponse::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ProbeResponse::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.gateway.v1.ProbeResponse.data)
  return _impl_.data_.Release();
}
inline void ProbeResponse::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.gateway.v1.ProbeResponse.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace gateway
}  // namespace proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fgateway_2fv1_2fcontrol_2eproto_2epb_2eh
