// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crypto/v1/signed.proto
// Protobuf C++ Version: 4.24.0-main

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcrypto_2fv1_2fsigned_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcrypto_2fv1_2fsigned_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fcrypto_2fv1_2fsigned_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcrypto_2fv1_2fsigned_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fcrypto_2fv1_2fsigned_2eproto;
namespace proto {
namespace crypto {
namespace v1 {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HeaderAndBodyInternal;
struct HeaderAndBodyInternalDefaultTypeInternal;
extern HeaderAndBodyInternalDefaultTypeInternal _HeaderAndBodyInternal_default_instance_;
class SignedMessage;
struct SignedMessageDefaultTypeInternal;
extern SignedMessageDefaultTypeInternal _SignedMessage_default_instance_;
}  // namespace v1
}  // namespace crypto
}  // namespace proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace proto {
namespace crypto {
namespace v1 {
enum SignatureAlgorithm : int {
  SIGNATURE_ALGORITHM_UNSPECIFIED = 0,
  SIGNATURE_ALGORITHM_ECDSA_WITH_SHA256 = 1,
  SIGNATURE_ALGORITHM_ECDSA_WITH_SHA384 = 2,
  SIGNATURE_ALGORITHM_ECDSA_WITH_SHA512 = 3,
  SignatureAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignatureAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignatureAlgorithm_IsValid(int value);
extern const uint32_t SignatureAlgorithm_internal_data_[];
constexpr SignatureAlgorithm SignatureAlgorithm_MIN = static_cast<SignatureAlgorithm>(0);
constexpr SignatureAlgorithm SignatureAlgorithm_MAX = static_cast<SignatureAlgorithm>(3);
constexpr int SignatureAlgorithm_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SignatureAlgorithm_descriptor();
template <typename T>
const std::string& SignatureAlgorithm_Name(T value) {
  static_assert(std::is_same<T, SignatureAlgorithm>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignatureAlgorithm_Name().");
  return SignatureAlgorithm_Name(static_cast<SignatureAlgorithm>(value));
}
template <>
inline const std::string& SignatureAlgorithm_Name(SignatureAlgorithm value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SignatureAlgorithm_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SignatureAlgorithm_Parse(absl::string_view name, SignatureAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignatureAlgorithm>(
      SignatureAlgorithm_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SignedMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.crypto.v1.SignedMessage) */ {
 public:
  inline SignedMessage() : SignedMessage(nullptr) {}
  ~SignedMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignedMessage(::google::protobuf::internal::ConstantInitialized);

  inline SignedMessage(const SignedMessage& from)
      : SignedMessage(nullptr, from) {}
  SignedMessage(SignedMessage&& from) noexcept
    : SignedMessage() {
    *this = ::std::move(from);
  }

  inline SignedMessage& operator=(const SignedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedMessage& operator=(SignedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignedMessage* internal_default_instance() {
    return reinterpret_cast<const SignedMessage*>(
               &_SignedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignedMessage& a, SignedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SignedMessage& from) {
    SignedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SignedMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.crypto.v1.SignedMessage";
  }
  protected:
  explicit SignedMessage(::google::protobuf::Arena* arena);
  SignedMessage(::google::protobuf::Arena* arena, const SignedMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderAndBodyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes header_and_body = 1;
  void clear_header_and_body() ;
  const std::string& header_and_body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header_and_body(Arg_&& arg, Args_... args);
  std::string* mutable_header_and_body();
  PROTOBUF_NODISCARD std::string* release_header_and_body();
  void set_allocated_header_and_body(std::string* value);

  private:
  const std::string& _internal_header_and_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_and_body(
      const std::string& value);
  std::string* _internal_mutable_header_and_body();

  public:
  // bytes signature = 2;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // @@protoc_insertion_point(class_scope:proto.crypto.v1.SignedMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr header_and_body_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcrypto_2fv1_2fsigned_2eproto;
};// -------------------------------------------------------------------

class HeaderAndBodyInternal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.crypto.v1.HeaderAndBodyInternal) */ {
 public:
  inline HeaderAndBodyInternal() : HeaderAndBodyInternal(nullptr) {}
  ~HeaderAndBodyInternal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HeaderAndBodyInternal(::google::protobuf::internal::ConstantInitialized);

  inline HeaderAndBodyInternal(const HeaderAndBodyInternal& from)
      : HeaderAndBodyInternal(nullptr, from) {}
  HeaderAndBodyInternal(HeaderAndBodyInternal&& from) noexcept
    : HeaderAndBodyInternal() {
    *this = ::std::move(from);
  }

  inline HeaderAndBodyInternal& operator=(const HeaderAndBodyInternal& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderAndBodyInternal& operator=(HeaderAndBodyInternal&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderAndBodyInternal& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderAndBodyInternal* internal_default_instance() {
    return reinterpret_cast<const HeaderAndBodyInternal*>(
               &_HeaderAndBodyInternal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeaderAndBodyInternal& a, HeaderAndBodyInternal& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderAndBodyInternal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderAndBodyInternal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeaderAndBodyInternal* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeaderAndBodyInternal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeaderAndBodyInternal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HeaderAndBodyInternal& from) {
    HeaderAndBodyInternal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HeaderAndBodyInternal* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.crypto.v1.HeaderAndBodyInternal";
  }
  protected:
  explicit HeaderAndBodyInternal(::google::protobuf::Arena* arena);
  HeaderAndBodyInternal(::google::protobuf::Arena* arena, const HeaderAndBodyInternal& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // bytes header = 1;
  void clear_header() ;
  const std::string& header() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header(Arg_&& arg, Args_... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* value);

  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(
      const std::string& value);
  std::string* _internal_mutable_header();

  public:
  // bytes body = 2;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:proto.crypto.v1.HeaderAndBodyInternal)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr header_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcrypto_2fv1_2fsigned_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.crypto.v1.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::google::protobuf::internal::ConstantInitialized);

  inline Header(const Header& from)
      : Header(nullptr, from) {}
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Header* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.crypto.v1.Header";
  }
  protected:
  explicit Header(::google::protobuf::Arena* arena);
  Header(::google::protobuf::Arena* arena, const Header& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerificationKeyIdFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kTimestampFieldNumber = 3,
    kSignatureAlgorithmFieldNumber = 1,
    kAssociatedDataLengthFieldNumber = 5,
  };
  // bytes verification_key_id = 2;
  void clear_verification_key_id() ;
  const std::string& verification_key_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_verification_key_id(Arg_&& arg, Args_... args);
  std::string* mutable_verification_key_id();
  PROTOBUF_NODISCARD std::string* release_verification_key_id();
  void set_allocated_verification_key_id(std::string* value);

  private:
  const std::string& _internal_verification_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_key_id(
      const std::string& value);
  std::string* _internal_mutable_verification_key_id();

  public:
  // bytes metadata = 4;
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .proto.crypto.v1.SignatureAlgorithm signature_algorithm = 1;
  void clear_signature_algorithm() ;
  ::proto::crypto::v1::SignatureAlgorithm signature_algorithm() const;
  void set_signature_algorithm(::proto::crypto::v1::SignatureAlgorithm value);

  private:
  ::proto::crypto::v1::SignatureAlgorithm _internal_signature_algorithm() const;
  void _internal_set_signature_algorithm(::proto::crypto::v1::SignatureAlgorithm value);

  public:
  // int32 associated_data_length = 5;
  void clear_associated_data_length() ;
  ::int32_t associated_data_length() const;
  void set_associated_data_length(::int32_t value);

  private:
  ::int32_t _internal_associated_data_length() const;
  void _internal_set_associated_data_length(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:proto.crypto.v1.Header)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr verification_key_id_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::Timestamp* timestamp_;
    int signature_algorithm_;
    ::int32_t associated_data_length_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcrypto_2fv1_2fsigned_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SignedMessage

// bytes header_and_body = 1;
inline void SignedMessage::clear_header_and_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_and_body_.ClearToEmpty();
}
inline const std::string& SignedMessage::header_and_body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.SignedMessage.header_and_body)
  return _internal_header_and_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignedMessage::set_header_and_body(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.header_and_body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.crypto.v1.SignedMessage.header_and_body)
}
inline std::string* SignedMessage::mutable_header_and_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_header_and_body();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.SignedMessage.header_and_body)
  return _s;
}
inline const std::string& SignedMessage::_internal_header_and_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.header_and_body_.Get();
}
inline void SignedMessage::_internal_set_header_and_body(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.header_and_body_.Set(value, GetArena());
}
inline std::string* SignedMessage::_internal_mutable_header_and_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.header_and_body_.Mutable( GetArena());
}
inline std::string* SignedMessage::release_header_and_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.SignedMessage.header_and_body)
  return _impl_.header_and_body_.Release();
}
inline void SignedMessage::set_allocated_header_and_body(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_and_body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_and_body_.IsDefault()) {
          _impl_.header_and_body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.SignedMessage.header_and_body)
}

// bytes signature = 2;
inline void SignedMessage::clear_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignedMessage::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.SignedMessage.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignedMessage::set_signature(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.crypto.v1.SignedMessage.signature)
}
inline std::string* SignedMessage::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.SignedMessage.signature)
  return _s;
}
inline const std::string& SignedMessage::_internal_signature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signature_.Get();
}
inline void SignedMessage::_internal_set_signature(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* SignedMessage::_internal_mutable_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* SignedMessage::release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.SignedMessage.signature)
  return _impl_.signature_.Release();
}
inline void SignedMessage::set_allocated_signature(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.SignedMessage.signature)
}

// -------------------------------------------------------------------

// Header

// .proto.crypto.v1.SignatureAlgorithm signature_algorithm = 1;
inline void Header::clear_signature_algorithm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signature_algorithm_ = 0;
}
inline ::proto::crypto::v1::SignatureAlgorithm Header::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.Header.signature_algorithm)
  return _internal_signature_algorithm();
}
inline void Header::set_signature_algorithm(::proto::crypto::v1::SignatureAlgorithm value) {
  _internal_set_signature_algorithm(value);
  // @@protoc_insertion_point(field_set:proto.crypto.v1.Header.signature_algorithm)
}
inline ::proto::crypto::v1::SignatureAlgorithm Header::_internal_signature_algorithm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::proto::crypto::v1::SignatureAlgorithm>(_impl_.signature_algorithm_);
}
inline void Header::_internal_set_signature_algorithm(::proto::crypto::v1::SignatureAlgorithm value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_algorithm_ = value;
}

// bytes verification_key_id = 2;
inline void Header::clear_verification_key_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.verification_key_id_.ClearToEmpty();
}
inline const std::string& Header::verification_key_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.Header.verification_key_id)
  return _internal_verification_key_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_verification_key_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.verification_key_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.crypto.v1.Header.verification_key_id)
}
inline std::string* Header::mutable_verification_key_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_verification_key_id();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.Header.verification_key_id)
  return _s;
}
inline const std::string& Header::_internal_verification_key_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.verification_key_id_.Get();
}
inline void Header::_internal_set_verification_key_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.verification_key_id_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_verification_key_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.verification_key_id_.Mutable( GetArena());
}
inline std::string* Header::release_verification_key_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.Header.verification_key_id)
  return _impl_.verification_key_id_.Release();
}
inline void Header::set_allocated_verification_key_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.verification_key_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.verification_key_id_.IsDefault()) {
          _impl_.verification_key_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.Header.verification_key_id)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool Header::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Header::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Header::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.crypto.v1.Header.timestamp)
}
inline ::google::protobuf::Timestamp* Header::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Header::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.Header.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Header::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* Header::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.Header.timestamp)
  return _msg;
}
inline void Header::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.Header.timestamp)
}

// bytes metadata = 4;
inline void Header::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Header::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.Header.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.crypto.v1.Header.metadata)
}
inline std::string* Header::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.Header.metadata)
  return _s;
}
inline const std::string& Header::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.Get();
}
inline void Header::_internal_set_metadata(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* Header::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.Header.metadata)
  return _impl_.metadata_.Release();
}
inline void Header::set_allocated_metadata(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.Header.metadata)
}

// int32 associated_data_length = 5;
inline void Header::clear_associated_data_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.associated_data_length_ = 0;
}
inline ::int32_t Header::associated_data_length() const {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.Header.associated_data_length)
  return _internal_associated_data_length();
}
inline void Header::set_associated_data_length(::int32_t value) {
  _internal_set_associated_data_length(value);
  // @@protoc_insertion_point(field_set:proto.crypto.v1.Header.associated_data_length)
}
inline ::int32_t Header::_internal_associated_data_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.associated_data_length_;
}
inline void Header::_internal_set_associated_data_length(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.associated_data_length_ = value;
}

// -------------------------------------------------------------------

// HeaderAndBodyInternal

// bytes header = 1;
inline void HeaderAndBodyInternal::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_.ClearToEmpty();
}
inline const std::string& HeaderAndBodyInternal::header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.HeaderAndBodyInternal.header)
  return _internal_header();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderAndBodyInternal::set_header(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.header_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.crypto.v1.HeaderAndBodyInternal.header)
}
inline std::string* HeaderAndBodyInternal::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.HeaderAndBodyInternal.header)
  return _s;
}
inline const std::string& HeaderAndBodyInternal::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.header_.Get();
}
inline void HeaderAndBodyInternal::_internal_set_header(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.header_.Set(value, GetArena());
}
inline std::string* HeaderAndBodyInternal::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.header_.Mutable( GetArena());
}
inline std::string* HeaderAndBodyInternal::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.HeaderAndBodyInternal.header)
  return _impl_.header_.Release();
}
inline void HeaderAndBodyInternal::set_allocated_header(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_.IsDefault()) {
          _impl_.header_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.HeaderAndBodyInternal.header)
}

// bytes body = 2;
inline void HeaderAndBodyInternal::clear_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& HeaderAndBodyInternal::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.crypto.v1.HeaderAndBodyInternal.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderAndBodyInternal::set_body(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.crypto.v1.HeaderAndBodyInternal.body)
}
inline std::string* HeaderAndBodyInternal::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:proto.crypto.v1.HeaderAndBodyInternal.body)
  return _s;
}
inline const std::string& HeaderAndBodyInternal::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.body_.Get();
}
inline void HeaderAndBodyInternal::_internal_set_body(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.Set(value, GetArena());
}
inline std::string* HeaderAndBodyInternal::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* HeaderAndBodyInternal::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.crypto.v1.HeaderAndBodyInternal.body)
  return _impl_.body_.Release();
}
inline void HeaderAndBodyInternal::set_allocated_body(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.crypto.v1.HeaderAndBodyInternal.body)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace crypto
}  // namespace proto


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::proto::crypto::v1::SignatureAlgorithm> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::proto::crypto::v1::SignatureAlgorithm>() {
  return ::proto::crypto::v1::SignatureAlgorithm_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fcrypto_2fv1_2fsigned_2eproto_2epb_2eh
