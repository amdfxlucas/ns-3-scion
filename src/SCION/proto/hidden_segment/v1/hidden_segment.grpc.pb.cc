// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/hidden_segment/v1/hidden_segment.proto

#include "proto/hidden_segment/v1/hidden_segment.pb.h"
#include "proto/hidden_segment/v1/hidden_segment.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {
namespace hidden_segment {
namespace v1 {

static const char* HiddenSegmentRegistrationService_method_names[] = {
  "/proto.hidden_segment.v1.HiddenSegmentRegistrationService/HiddenSegmentRegistration",
};

std::unique_ptr< HiddenSegmentRegistrationService::Stub> HiddenSegmentRegistrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HiddenSegmentRegistrationService::Stub> stub(new HiddenSegmentRegistrationService::Stub(channel, options));
  return stub;
}

HiddenSegmentRegistrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HiddenSegmentRegistration_(HiddenSegmentRegistrationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HiddenSegmentRegistrationService::Stub::HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HiddenSegmentRegistration_, context, request, response);
}

void HiddenSegmentRegistrationService::Stub::async::HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HiddenSegmentRegistration_, context, request, response, std::move(f));
}

void HiddenSegmentRegistrationService::Stub::async::HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HiddenSegmentRegistration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* HiddenSegmentRegistrationService::Stub::PrepareAsyncHiddenSegmentRegistrationRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse, ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HiddenSegmentRegistration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* HiddenSegmentRegistrationService::Stub::AsyncHiddenSegmentRegistrationRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHiddenSegmentRegistrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

HiddenSegmentRegistrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HiddenSegmentRegistrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HiddenSegmentRegistrationService::Service, ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HiddenSegmentRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* req,
             ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* resp) {
               return service->HiddenSegmentRegistration(ctx, req, resp);
             }, this)));
}

HiddenSegmentRegistrationService::Service::~Service() {
}

::grpc::Status HiddenSegmentRegistrationService::Service::HiddenSegmentRegistration(::grpc::ServerContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HiddenSegmentLookupService_method_names[] = {
  "/proto.hidden_segment.v1.HiddenSegmentLookupService/HiddenSegments",
};

std::unique_ptr< HiddenSegmentLookupService::Stub> HiddenSegmentLookupService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HiddenSegmentLookupService::Stub> stub(new HiddenSegmentLookupService::Stub(channel, options));
  return stub;
}

HiddenSegmentLookupService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HiddenSegments_(HiddenSegmentLookupService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HiddenSegmentLookupService::Stub::HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HiddenSegments_, context, request, response);
}

void HiddenSegmentLookupService::Stub::async::HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HiddenSegments_, context, request, response, std::move(f));
}

void HiddenSegmentLookupService::Stub::async::HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HiddenSegments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* HiddenSegmentLookupService::Stub::PrepareAsyncHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::hidden_segment::v1::HiddenSegmentsResponse, ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HiddenSegments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* HiddenSegmentLookupService::Stub::AsyncHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHiddenSegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

HiddenSegmentLookupService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HiddenSegmentLookupService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HiddenSegmentLookupService::Service, ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HiddenSegmentLookupService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::hidden_segment::v1::HiddenSegmentsRequest* req,
             ::proto::hidden_segment::v1::HiddenSegmentsResponse* resp) {
               return service->HiddenSegments(ctx, req, resp);
             }, this)));
}

HiddenSegmentLookupService::Service::~Service() {
}

::grpc::Status HiddenSegmentLookupService::Service::HiddenSegments(::grpc::ServerContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AuthoritativeHiddenSegmentLookupService_method_names[] = {
  "/proto.hidden_segment.v1.AuthoritativeHiddenSegmentLookupService/AuthoritativeHiddenSegments",
};

std::unique_ptr< AuthoritativeHiddenSegmentLookupService::Stub> AuthoritativeHiddenSegmentLookupService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthoritativeHiddenSegmentLookupService::Stub> stub(new AuthoritativeHiddenSegmentLookupService::Stub(channel, options));
  return stub;
}

AuthoritativeHiddenSegmentLookupService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuthoritativeHiddenSegments_(AuthoritativeHiddenSegmentLookupService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthoritativeHiddenSegmentLookupService::Stub::AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthoritativeHiddenSegments_, context, request, response);
}

void AuthoritativeHiddenSegmentLookupService::Stub::async::AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthoritativeHiddenSegments_, context, request, response, std::move(f));
}

void AuthoritativeHiddenSegmentLookupService::Stub::async::AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthoritativeHiddenSegments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* AuthoritativeHiddenSegmentLookupService::Stub::PrepareAsyncAuthoritativeHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthoritativeHiddenSegments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* AuthoritativeHiddenSegmentLookupService::Stub::AsyncAuthoritativeHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthoritativeHiddenSegmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

AuthoritativeHiddenSegmentLookupService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthoritativeHiddenSegmentLookupService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthoritativeHiddenSegmentLookupService::Service, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthoritativeHiddenSegmentLookupService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* req,
             ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* resp) {
               return service->AuthoritativeHiddenSegments(ctx, req, resp);
             }, this)));
}

AuthoritativeHiddenSegmentLookupService::Service::~Service() {
}

::grpc::Status AuthoritativeHiddenSegmentLookupService::Service::AuthoritativeHiddenSegments(::grpc::ServerContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace hidden_segment
}  // namespace v1

