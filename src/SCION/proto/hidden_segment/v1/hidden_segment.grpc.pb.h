// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/hidden_segment/v1/hidden_segment.proto
// Original file comments:
// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_proto_2fhidden_5fsegment_2fv1_2fhidden_5fsegment_2eproto__INCLUDED
#define GRPC_proto_2fhidden_5fsegment_2fv1_2fhidden_5fsegment_2eproto__INCLUDED

#include "proto/hidden_segment/v1/hidden_segment.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {
namespace hidden_segment {
namespace v1 {

class HiddenSegmentRegistrationService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.hidden_segment.v1.HiddenSegmentRegistrationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // HiddenSegmentRegistration registers hidden segments at the remote.
    virtual ::grpc::Status HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>> AsyncHiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>>(AsyncHiddenSegmentRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>> PrepareAsyncHiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>>(PrepareAsyncHiddenSegmentRegistrationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // HiddenSegmentRegistration registers hidden segments at the remote.
      virtual void HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* AsyncHiddenSegmentRegistrationRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* PrepareAsyncHiddenSegmentRegistrationRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>> AsyncHiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>>(AsyncHiddenSegmentRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>> PrepareAsyncHiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>>(PrepareAsyncHiddenSegmentRegistrationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void HiddenSegmentRegistration(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* AsyncHiddenSegmentRegistrationRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* PrepareAsyncHiddenSegmentRegistrationRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HiddenSegmentRegistration_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // HiddenSegmentRegistration registers hidden segments at the remote.
    virtual ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HiddenSegmentRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HiddenSegmentRegistration() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HiddenSegmentRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHiddenSegmentRegistration(::grpc::ServerContext* context, ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HiddenSegmentRegistration<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_HiddenSegmentRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HiddenSegmentRegistration() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* request, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* response) { return this->HiddenSegmentRegistration(context, request, response); }));}
    void SetMessageAllocatorFor_HiddenSegmentRegistration(
        ::grpc::MessageAllocator< ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HiddenSegmentRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HiddenSegmentRegistration(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_HiddenSegmentRegistration<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HiddenSegmentRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HiddenSegmentRegistration() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HiddenSegmentRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HiddenSegmentRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HiddenSegmentRegistration() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HiddenSegmentRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHiddenSegmentRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HiddenSegmentRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HiddenSegmentRegistration() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HiddenSegmentRegistration(context, request, response); }));
    }
    ~WithRawCallbackMethod_HiddenSegmentRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HiddenSegmentRegistration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HiddenSegmentRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HiddenSegmentRegistration() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* streamer) {
                       return this->StreamedHiddenSegmentRegistration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HiddenSegmentRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HiddenSegmentRegistration(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHiddenSegmentRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::hidden_segment::v1::HiddenSegmentRegistrationRequest,::proto::hidden_segment::v1::HiddenSegmentRegistrationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HiddenSegmentRegistration<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HiddenSegmentRegistration<Service > StreamedService;
};

class HiddenSegmentLookupService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.hidden_segment.v1.HiddenSegmentLookupService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // HiddenSegments returns all segments that match the request.
    virtual ::grpc::Status HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentsResponse>> AsyncHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentsResponse>>(AsyncHiddenSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentsResponse>> PrepareAsyncHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentsResponse>>(PrepareAsyncHiddenSegmentsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // HiddenSegments returns all segments that match the request.
      virtual void HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* AsyncHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* PrepareAsyncHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>> AsyncHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>>(AsyncHiddenSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>> PrepareAsyncHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>>(PrepareAsyncHiddenSegmentsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response, std::function<void(::grpc::Status)>) override;
      void HiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* AsyncHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* PrepareAsyncHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HiddenSegments_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // HiddenSegments returns all segments that match the request.
    virtual ::grpc::Status HiddenSegments(::grpc::ServerContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HiddenSegments() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHiddenSegments(::grpc::ServerContext* context, ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::hidden_segment::v1::HiddenSegmentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HiddenSegments<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_HiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HiddenSegments() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* request, ::proto::hidden_segment::v1::HiddenSegmentsResponse* response) { return this->HiddenSegments(context, request, response); }));}
    void SetMessageAllocatorFor_HiddenSegments(
        ::grpc::MessageAllocator< ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HiddenSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_HiddenSegments<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HiddenSegments() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HiddenSegments() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHiddenSegments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HiddenSegments() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HiddenSegments(context, request, response); }));
    }
    ~WithRawCallbackMethod_HiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HiddenSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HiddenSegments() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::hidden_segment::v1::HiddenSegmentsRequest, ::proto::hidden_segment::v1::HiddenSegmentsResponse>* streamer) {
                       return this->StreamedHiddenSegments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::HiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::HiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHiddenSegments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::hidden_segment::v1::HiddenSegmentsRequest,::proto::hidden_segment::v1::HiddenSegmentsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HiddenSegments<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HiddenSegments<Service > StreamedService;
};

class AuthoritativeHiddenSegmentLookupService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.hidden_segment.v1.AuthoritativeHiddenSegmentLookupService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // HiddenSegments returns all segments that match the request.
    virtual ::grpc::Status AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>> AsyncAuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>>(AsyncAuthoritativeHiddenSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>> PrepareAsyncAuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>>(PrepareAsyncAuthoritativeHiddenSegmentsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // HiddenSegments returns all segments that match the request.
      virtual void AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* AsyncAuthoritativeHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* PrepareAsyncAuthoritativeHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>> AsyncAuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>>(AsyncAuthoritativeHiddenSegmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>> PrepareAsyncAuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>>(PrepareAsyncAuthoritativeHiddenSegmentsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response, std::function<void(::grpc::Status)>) override;
      void AuthoritativeHiddenSegments(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* AsyncAuthoritativeHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* PrepareAsyncAuthoritativeHiddenSegmentsRaw(::grpc::ClientContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuthoritativeHiddenSegments_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // HiddenSegments returns all segments that match the request.
    virtual ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthoritativeHiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthoritativeHiddenSegments() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuthoritativeHiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthoritativeHiddenSegments(::grpc::ServerContext* context, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuthoritativeHiddenSegments<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuthoritativeHiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuthoritativeHiddenSegments() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* request, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* response) { return this->AuthoritativeHiddenSegments(context, request, response); }));}
    void SetMessageAllocatorFor_AuthoritativeHiddenSegments(
        ::grpc::MessageAllocator< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuthoritativeHiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthoritativeHiddenSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AuthoritativeHiddenSegments<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuthoritativeHiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthoritativeHiddenSegments() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuthoritativeHiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthoritativeHiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthoritativeHiddenSegments() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuthoritativeHiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthoritativeHiddenSegments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuthoritativeHiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuthoritativeHiddenSegments() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthoritativeHiddenSegments(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuthoritativeHiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthoritativeHiddenSegments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthoritativeHiddenSegments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthoritativeHiddenSegments() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* streamer) {
                       return this->StreamedAuthoritativeHiddenSegments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuthoritativeHiddenSegments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthoritativeHiddenSegments(::grpc::ServerContext* /*context*/, const ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest* /*request*/, ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthoritativeHiddenSegments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsRequest,::proto::hidden_segment::v1::AuthoritativeHiddenSegmentsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuthoritativeHiddenSegments<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuthoritativeHiddenSegments<Service > StreamedService;
};

}  // namespace v1
}  // namespace hidden_segment
}  // namespace proto


#endif  // GRPC_proto_2fhidden_5fsegment_2fv1_2fhidden_5fsegment_2eproto__INCLUDED
