// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/daemon/v1/daemon.proto
// Original file comments:
// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_proto_2fdaemon_2fv1_2fdaemon_2eproto__INCLUDED
#define GRPC_proto_2fdaemon_2fv1_2fdaemon_2eproto__INCLUDED

#include "proto/daemon/v1/daemon.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {
namespace daemon {
namespace v1 {

class DaemonService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.daemon.v1.DaemonService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return a set of paths to the requested destination.
    virtual ::grpc::Status Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::proto::daemon::v1::PathsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::PathsResponse>> AsyncPaths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::PathsResponse>>(AsyncPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::PathsResponse>> PrepareAsyncPaths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::PathsResponse>>(PrepareAsyncPathsRaw(context, request, cq));
    }
    // Return information about an AS.
    virtual ::grpc::Status AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::proto::daemon::v1::ASResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ASResponse>> AsyncAS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ASResponse>>(AsyncASRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ASResponse>> PrepareAsyncAS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ASResponse>>(PrepareAsyncASRaw(context, request, cq));
    }
    // Return the underlay addresses associated with
    // the specified interfaces.
    virtual ::grpc::Status Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::proto::daemon::v1::InterfacesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::InterfacesResponse>> AsyncInterfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::InterfacesResponse>>(AsyncInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::InterfacesResponse>> PrepareAsyncInterfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::InterfacesResponse>>(PrepareAsyncInterfacesRaw(context, request, cq));
    }
    // Return the underlay addresses associated with the
    // specified services.
    virtual ::grpc::Status Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::proto::daemon::v1::ServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ServicesResponse>> AsyncServices(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ServicesResponse>>(AsyncServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ServicesResponse>> PrepareAsyncServices(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ServicesResponse>>(PrepareAsyncServicesRaw(context, request, cq));
    }
    // Inform the SCION Daemon of a revocation.
    virtual ::grpc::Status NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::NotifyInterfaceDownResponse>> AsyncNotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::NotifyInterfaceDownResponse>>(AsyncNotifyInterfaceDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::NotifyInterfaceDownResponse>> PrepareAsyncNotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::NotifyInterfaceDownResponse>>(PrepareAsyncNotifyInterfaceDownRaw(context, request, cq));
    }
    // DRKeyASHost returns a key that matches the request.
    virtual ::grpc::Status DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::proto::daemon::v1::DRKeyASHostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyASHostResponse>> AsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyASHostResponse>>(AsyncDRKeyASHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyASHostResponse>> PrepareAsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyASHostResponse>>(PrepareAsyncDRKeyASHostRaw(context, request, cq));
    }
    // DRKeyHostAS returns a key that matches the request.
    virtual ::grpc::Status DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::proto::daemon::v1::DRKeyHostASResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostASResponse>> AsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostASResponse>>(AsyncDRKeyHostASRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostASResponse>> PrepareAsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostASResponse>>(PrepareAsyncDRKeyHostASRaw(context, request, cq));
    }
    // DRKeyHostHost returns a key that matches the request.
    virtual ::grpc::Status DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::proto::daemon::v1::DRKeyHostHostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostHostResponse>> AsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostHostResponse>>(AsyncDRKeyHostHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostHostResponse>> PrepareAsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostHostResponse>>(PrepareAsyncDRKeyHostHostRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return a set of paths to the requested destination.
      virtual void Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return information about an AS.
      virtual void AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return the underlay addresses associated with
      // the specified interfaces.
      virtual void Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return the underlay addresses associated with the
      // specified services.
      virtual void Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Inform the SCION Daemon of a revocation.
      virtual void NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DRKeyASHost returns a key that matches the request.
      virtual void DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DRKeyHostAS returns a key that matches the request.
      virtual void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DRKeyHostHost returns a key that matches the request.
      virtual void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::PathsResponse>* AsyncPathsRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::PathsResponse>* PrepareAsyncPathsRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ASResponse>* AsyncASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ASResponse>* PrepareAsyncASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::InterfacesResponse>* AsyncInterfacesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::InterfacesResponse>* PrepareAsyncInterfacesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ServicesResponse>* AsyncServicesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::ServicesResponse>* PrepareAsyncServicesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::NotifyInterfaceDownResponse>* AsyncNotifyInterfaceDownRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::NotifyInterfaceDownResponse>* PrepareAsyncNotifyInterfaceDownRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyASHostResponse>* AsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyASHostResponse>* PrepareAsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostASResponse>* AsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostASResponse>* PrepareAsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostHostResponse>* AsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::daemon::v1::DRKeyHostHostResponse>* PrepareAsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::proto::daemon::v1::PathsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>> AsyncPaths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>>(AsyncPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>> PrepareAsyncPaths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>>(PrepareAsyncPathsRaw(context, request, cq));
    }
    ::grpc::Status AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::proto::daemon::v1::ASResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>> AsyncAS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>>(AsyncASRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>> PrepareAsyncAS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>>(PrepareAsyncASRaw(context, request, cq));
    }
    ::grpc::Status Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::proto::daemon::v1::InterfacesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>> AsyncInterfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>>(AsyncInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>> PrepareAsyncInterfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>>(PrepareAsyncInterfacesRaw(context, request, cq));
    }
    ::grpc::Status Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::proto::daemon::v1::ServicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>> AsyncServices(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>>(AsyncServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>> PrepareAsyncServices(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>>(PrepareAsyncServicesRaw(context, request, cq));
    }
    ::grpc::Status NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>> AsyncNotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>>(AsyncNotifyInterfaceDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>> PrepareAsyncNotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>>(PrepareAsyncNotifyInterfaceDownRaw(context, request, cq));
    }
    ::grpc::Status DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::proto::daemon::v1::DRKeyASHostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>> AsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>>(AsyncDRKeyASHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>> PrepareAsyncDRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>>(PrepareAsyncDRKeyASHostRaw(context, request, cq));
    }
    ::grpc::Status DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::proto::daemon::v1::DRKeyHostASResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>> AsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>>(AsyncDRKeyHostASRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>> PrepareAsyncDRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>>(PrepareAsyncDRKeyHostASRaw(context, request, cq));
    }
    ::grpc::Status DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::proto::daemon::v1::DRKeyHostHostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>> AsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>>(AsyncDRKeyHostHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>> PrepareAsyncDRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>>(PrepareAsyncDRKeyHostHostRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response, std::function<void(::grpc::Status)>) override;
      void Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response, std::function<void(::grpc::Status)>) override;
      void AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response, std::function<void(::grpc::Status)>) override;
      void Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response, std::function<void(::grpc::Status)>) override;
      void Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response, std::function<void(::grpc::Status)>) override;
      void NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response, std::function<void(::grpc::Status)>) override;
      void DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>* AsyncPathsRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>* PrepareAsyncPathsRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>* AsyncASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>* PrepareAsyncASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>* AsyncInterfacesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>* PrepareAsyncInterfacesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>* AsyncServicesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>* PrepareAsyncServicesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>* AsyncNotifyInterfaceDownRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>* PrepareAsyncNotifyInterfaceDownRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>* AsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>* PrepareAsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>* AsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>* PrepareAsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>* AsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>* PrepareAsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Paths_;
    const ::grpc::internal::RpcMethod rpcmethod_AS_;
    const ::grpc::internal::RpcMethod rpcmethod_Interfaces_;
    const ::grpc::internal::RpcMethod rpcmethod_Services_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyInterfaceDown_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyASHost_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyHostAS_;
    const ::grpc::internal::RpcMethod rpcmethod_DRKeyHostHost_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return a set of paths to the requested destination.
    virtual ::grpc::Status Paths(::grpc::ServerContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response);
    // Return information about an AS.
    virtual ::grpc::Status AS(::grpc::ServerContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response);
    // Return the underlay addresses associated with
    // the specified interfaces.
    virtual ::grpc::Status Interfaces(::grpc::ServerContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response);
    // Return the underlay addresses associated with the
    // specified services.
    virtual ::grpc::Status Services(::grpc::ServerContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response);
    // Inform the SCION Daemon of a revocation.
    virtual ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response);
    // DRKeyASHost returns a key that matches the request.
    virtual ::grpc::Status DRKeyASHost(::grpc::ServerContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response);
    // DRKeyHostAS returns a key that matches the request.
    virtual ::grpc::Status DRKeyHostAS(::grpc::ServerContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response);
    // DRKeyHostHost returns a key that matches the request.
    virtual ::grpc::Status DRKeyHostHost(::grpc::ServerContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Paths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Paths() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Paths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Paths(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPaths(::grpc::ServerContext* context, ::proto::daemon::v1::PathsRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::PathsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AS() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAS(::grpc::ServerContext* context, ::proto::daemon::v1::ASRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::ASResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Interfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Interfaces() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Interfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Interfaces(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInterfaces(::grpc::ServerContext* context, ::proto::daemon::v1::InterfacesRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::InterfacesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Services() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Services(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServices(::grpc::ServerContext* context, ::proto::daemon::v1::ServicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::ServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyInterfaceDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyInterfaceDown() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_NotifyInterfaceDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyInterfaceDown(::grpc::ServerContext* context, ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::NotifyInterfaceDownResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyASHost(::grpc::ServerContext* context, ::proto::daemon::v1::DRKeyASHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::DRKeyASHostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostAS(::grpc::ServerContext* context, ::proto::daemon::v1::DRKeyHostASRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::DRKeyHostASResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostHost(::grpc::ServerContext* context, ::proto::daemon::v1::DRKeyHostHostRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::daemon::v1::DRKeyHostHostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Paths<WithAsyncMethod_AS<WithAsyncMethod_Interfaces<WithAsyncMethod_Services<WithAsyncMethod_NotifyInterfaceDown<WithAsyncMethod_DRKeyASHost<WithAsyncMethod_DRKeyHostAS<WithAsyncMethod_DRKeyHostHost<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Paths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Paths() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response) { return this->Paths(context, request, response); }));}
    void SetMessageAllocatorFor_Paths(
        ::grpc::MessageAllocator< ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Paths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Paths(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Paths(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AS() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response) { return this->AS(context, request, response); }));}
    void SetMessageAllocatorFor_AS(
        ::grpc::MessageAllocator< ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AS(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Interfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Interfaces() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response) { return this->Interfaces(context, request, response); }));}
    void SetMessageAllocatorFor_Interfaces(
        ::grpc::MessageAllocator< ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Interfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Interfaces(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Interfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Services() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response) { return this->Services(context, request, response); }));}
    void SetMessageAllocatorFor_Services(
        ::grpc::MessageAllocator< ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Services(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Services(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NotifyInterfaceDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyInterfaceDown() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response) { return this->NotifyInterfaceDown(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyInterfaceDown(
        ::grpc::MessageAllocator< ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyInterfaceDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyInterfaceDown(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response) { return this->DRKeyASHost(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyASHost(
        ::grpc::MessageAllocator< ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyASHost(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response) { return this->DRKeyHostAS(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyHostAS(
        ::grpc::MessageAllocator< ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostAS(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response) { return this->DRKeyHostHost(context, request, response); }));}
    void SetMessageAllocatorFor_DRKeyHostHost(
        ::grpc::MessageAllocator< ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostHost(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Paths<WithCallbackMethod_AS<WithCallbackMethod_Interfaces<WithCallbackMethod_Services<WithCallbackMethod_NotifyInterfaceDown<WithCallbackMethod_DRKeyASHost<WithCallbackMethod_DRKeyHostAS<WithCallbackMethod_DRKeyHostHost<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Paths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Paths() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Paths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Paths(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AS() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Interfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Interfaces() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Interfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Interfaces(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Services() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Services(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyInterfaceDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyInterfaceDown() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_NotifyInterfaceDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Paths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Paths() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Paths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Paths(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPaths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AS() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAS(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Interfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Interfaces() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Interfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Interfaces(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInterfaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Services() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Services(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyInterfaceDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyInterfaceDown() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_NotifyInterfaceDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyInterfaceDown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyASHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostAS(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDRKeyHostHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Paths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Paths() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Paths(context, request, response); }));
    }
    ~WithRawCallbackMethod_Paths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Paths(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Paths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AS() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AS(context, request, response); }));
    }
    ~WithRawCallbackMethod_AS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AS(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Interfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Interfaces() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Interfaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_Interfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Interfaces(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Interfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Services() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Services(context, request, response); }));
    }
    ~WithRawCallbackMethod_Services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Services(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Services(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyInterfaceDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyInterfaceDown() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyInterfaceDown(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyInterfaceDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyInterfaceDown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyASHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyASHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyHostAS(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostAS(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DRKeyHostHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DRKeyHostHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Paths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Paths() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse>* streamer) {
                       return this->StreamedPaths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Paths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Paths(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::PathsRequest* /*request*/, ::proto::daemon::v1::PathsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPaths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::PathsRequest,::proto::daemon::v1::PathsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AS() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse>* streamer) {
                       return this->StreamedAS(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ASRequest* /*request*/, ::proto::daemon::v1::ASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::ASRequest,::proto::daemon::v1::ASResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Interfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Interfaces() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse>* streamer) {
                       return this->StreamedInterfaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Interfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Interfaces(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::InterfacesRequest* /*request*/, ::proto::daemon::v1::InterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInterfaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::InterfacesRequest,::proto::daemon::v1::InterfacesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Services : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Services() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse>* streamer) {
                       return this->StreamedServices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Services() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Services(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::ServicesRequest* /*request*/, ::proto::daemon::v1::ServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::ServicesRequest,::proto::daemon::v1::ServicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyInterfaceDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyInterfaceDown() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse>* streamer) {
                       return this->StreamedNotifyInterfaceDown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyInterfaceDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyInterfaceDown(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::NotifyInterfaceDownRequest* /*request*/, ::proto::daemon::v1::NotifyInterfaceDownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyInterfaceDown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::NotifyInterfaceDownRequest,::proto::daemon::v1::NotifyInterfaceDownResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyASHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyASHost() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse>* streamer) {
                       return this->StreamedDRKeyASHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyASHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyASHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyASHostRequest* /*request*/, ::proto::daemon::v1::DRKeyASHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyASHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::DRKeyASHostRequest,::proto::daemon::v1::DRKeyASHostResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyHostAS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyHostAS() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse>* streamer) {
                       return this->StreamedDRKeyHostAS(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyHostAS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyHostAS(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostASRequest* /*request*/, ::proto::daemon::v1::DRKeyHostASResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyHostAS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::DRKeyHostASRequest,::proto::daemon::v1::DRKeyHostASResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DRKeyHostHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DRKeyHostHost() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse>* streamer) {
                       return this->StreamedDRKeyHostHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DRKeyHostHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DRKeyHostHost(::grpc::ServerContext* /*context*/, const ::proto::daemon::v1::DRKeyHostHostRequest* /*request*/, ::proto::daemon::v1::DRKeyHostHostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDRKeyHostHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::daemon::v1::DRKeyHostHostRequest,::proto::daemon::v1::DRKeyHostHostResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Paths<WithStreamedUnaryMethod_AS<WithStreamedUnaryMethod_Interfaces<WithStreamedUnaryMethod_Services<WithStreamedUnaryMethod_NotifyInterfaceDown<WithStreamedUnaryMethod_DRKeyASHost<WithStreamedUnaryMethod_DRKeyHostAS<WithStreamedUnaryMethod_DRKeyHostHost<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Paths<WithStreamedUnaryMethod_AS<WithStreamedUnaryMethod_Interfaces<WithStreamedUnaryMethod_Services<WithStreamedUnaryMethod_NotifyInterfaceDown<WithStreamedUnaryMethod_DRKeyASHost<WithStreamedUnaryMethod_DRKeyHostAS<WithStreamedUnaryMethod_DRKeyHostHost<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace daemon
}  // namespace proto


#endif  // GRPC_proto_2fdaemon_2fv1_2fdaemon_2eproto__INCLUDED
