// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/daemon/v1/daemon.proto

#include "proto/daemon/v1/daemon.pb.h"
#include "proto/daemon/v1/daemon.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {
namespace daemon {
namespace v1 {

static const char* DaemonService_method_names[] = {
  "/proto.daemon.v1.DaemonService/Paths",
  "/proto.daemon.v1.DaemonService/AS",
  "/proto.daemon.v1.DaemonService/Interfaces",
  "/proto.daemon.v1.DaemonService/Services",
  "/proto.daemon.v1.DaemonService/NotifyInterfaceDown",
  "/proto.daemon.v1.DaemonService/DRKeyASHost",
  "/proto.daemon.v1.DaemonService/DRKeyHostAS",
  "/proto.daemon.v1.DaemonService/DRKeyHostHost",
};

std::unique_ptr< DaemonService::Stub> DaemonService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DaemonService::Stub> stub(new DaemonService::Stub(channel, options));
  return stub;
}

DaemonService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Paths_(DaemonService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AS_(DaemonService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Interfaces_(DaemonService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Services_(DaemonService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyInterfaceDown_(DaemonService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeyASHost_(DaemonService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeyHostAS_(DaemonService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DRKeyHostHost_(DaemonService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DaemonService::Stub::Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::proto::daemon::v1::PathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Paths_, context, request, response);
}

void DaemonService::Stub::async::Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Paths_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::Paths(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Paths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>* DaemonService::Stub::PrepareAsyncPathsRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::PathsResponse, ::proto::daemon::v1::PathsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Paths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::PathsResponse>* DaemonService::Stub::AsyncPathsRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::PathsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::proto::daemon::v1::ASResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AS_, context, request, response);
}

void DaemonService::Stub::async::AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AS_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::AS(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>* DaemonService::Stub::PrepareAsyncASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::ASResponse, ::proto::daemon::v1::ASRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ASResponse>* DaemonService::Stub::AsyncASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ASRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncASRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::proto::daemon::v1::InterfacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Interfaces_, context, request, response);
}

void DaemonService::Stub::async::Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Interfaces_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::Interfaces(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Interfaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>* DaemonService::Stub::PrepareAsyncInterfacesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::InterfacesResponse, ::proto::daemon::v1::InterfacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Interfaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::InterfacesResponse>* DaemonService::Stub::AsyncInterfacesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::InterfacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInterfacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::proto::daemon::v1::ServicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Services_, context, request, response);
}

void DaemonService::Stub::async::Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Services_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::Services(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Services_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>* DaemonService::Stub::PrepareAsyncServicesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::ServicesResponse, ::proto::daemon::v1::ServicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Services_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::ServicesResponse>* DaemonService::Stub::AsyncServicesRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::ServicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyInterfaceDown_, context, request, response);
}

void DaemonService::Stub::async::NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyInterfaceDown_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::NotifyInterfaceDown(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyInterfaceDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>* DaemonService::Stub::PrepareAsyncNotifyInterfaceDownRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::NotifyInterfaceDownResponse, ::proto::daemon::v1::NotifyInterfaceDownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyInterfaceDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::NotifyInterfaceDownResponse>* DaemonService::Stub::AsyncNotifyInterfaceDownRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyInterfaceDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::proto::daemon::v1::DRKeyASHostResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyASHost_, context, request, response);
}

void DaemonService::Stub::async::DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyASHost_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::DRKeyASHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyASHost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>* DaemonService::Stub::PrepareAsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::DRKeyASHostResponse, ::proto::daemon::v1::DRKeyASHostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyASHost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyASHostResponse>* DaemonService::Stub::AsyncDRKeyASHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyASHostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyASHostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::proto::daemon::v1::DRKeyHostASResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyHostAS_, context, request, response);
}

void DaemonService::Stub::async::DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostAS_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::DRKeyHostAS(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostAS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>* DaemonService::Stub::PrepareAsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::DRKeyHostASResponse, ::proto::daemon::v1::DRKeyHostASRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyHostAS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostASResponse>* DaemonService::Stub::AsyncDRKeyHostASRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostASRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyHostASRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DaemonService::Stub::DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::proto::daemon::v1::DRKeyHostHostResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DRKeyHostHost_, context, request, response);
}

void DaemonService::Stub::async::DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostHost_, context, request, response, std::move(f));
}

void DaemonService::Stub::async::DRKeyHostHost(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DRKeyHostHost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>* DaemonService::Stub::PrepareAsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::daemon::v1::DRKeyHostHostResponse, ::proto::daemon::v1::DRKeyHostHostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DRKeyHostHost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::daemon::v1::DRKeyHostHostResponse>* DaemonService::Stub::AsyncDRKeyHostHostRaw(::grpc::ClientContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDRKeyHostHostRaw(context, request, cq);
  result->StartCall();
  return result;
}

DaemonService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::PathsRequest, ::proto::daemon::v1::PathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::PathsRequest* req,
             ::proto::daemon::v1::PathsResponse* resp) {
               return service->Paths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::ASRequest, ::proto::daemon::v1::ASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::ASRequest* req,
             ::proto::daemon::v1::ASResponse* resp) {
               return service->AS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::InterfacesRequest, ::proto::daemon::v1::InterfacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::InterfacesRequest* req,
             ::proto::daemon::v1::InterfacesResponse* resp) {
               return service->Interfaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::ServicesRequest, ::proto::daemon::v1::ServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::ServicesRequest* req,
             ::proto::daemon::v1::ServicesResponse* resp) {
               return service->Services(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::NotifyInterfaceDownRequest, ::proto::daemon::v1::NotifyInterfaceDownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::NotifyInterfaceDownRequest* req,
             ::proto::daemon::v1::NotifyInterfaceDownResponse* resp) {
               return service->NotifyInterfaceDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::DRKeyASHostRequest, ::proto::daemon::v1::DRKeyASHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::DRKeyASHostRequest* req,
             ::proto::daemon::v1::DRKeyASHostResponse* resp) {
               return service->DRKeyASHost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::DRKeyHostASRequest, ::proto::daemon::v1::DRKeyHostASResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::DRKeyHostASRequest* req,
             ::proto::daemon::v1::DRKeyHostASResponse* resp) {
               return service->DRKeyHostAS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DaemonService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DaemonService::Service, ::proto::daemon::v1::DRKeyHostHostRequest, ::proto::daemon::v1::DRKeyHostHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DaemonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::daemon::v1::DRKeyHostHostRequest* req,
             ::proto::daemon::v1::DRKeyHostHostResponse* resp) {
               return service->DRKeyHostHost(ctx, req, resp);
             }, this)));
}

DaemonService::Service::~Service() {
}

::grpc::Status DaemonService::Service::Paths(::grpc::ServerContext* context, const ::proto::daemon::v1::PathsRequest* request, ::proto::daemon::v1::PathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::AS(::grpc::ServerContext* context, const ::proto::daemon::v1::ASRequest* request, ::proto::daemon::v1::ASResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::Interfaces(::grpc::ServerContext* context, const ::proto::daemon::v1::InterfacesRequest* request, ::proto::daemon::v1::InterfacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::Services(::grpc::ServerContext* context, const ::proto::daemon::v1::ServicesRequest* request, ::proto::daemon::v1::ServicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::NotifyInterfaceDown(::grpc::ServerContext* context, const ::proto::daemon::v1::NotifyInterfaceDownRequest* request, ::proto::daemon::v1::NotifyInterfaceDownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::DRKeyASHost(::grpc::ServerContext* context, const ::proto::daemon::v1::DRKeyASHostRequest* request, ::proto::daemon::v1::DRKeyASHostResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::DRKeyHostAS(::grpc::ServerContext* context, const ::proto::daemon::v1::DRKeyHostASRequest* request, ::proto::daemon::v1::DRKeyHostASResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DaemonService::Service::DRKeyHostHost(::grpc::ServerContext* context, const ::proto::daemon::v1::DRKeyHostHostRequest* request, ::proto::daemon::v1::DRKeyHostHostResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace daemon
}  // namespace v1

